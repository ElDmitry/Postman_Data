{
	"info": {
		"_postman_id": "dae9a275-b88a-42b9-9ac8-7c54e989bf00",
		"name": "QA Avto",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12538144"
	},
	"item": [
		{
			"name": "Sign Up Homework2",
			"item": [
				{
					"name": "Validation Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let validationData = pm.collectionVariables.get('nameData');\r",
									"\r",
									"if(validationData.length > 0){\r",
									"    console.log('+')\r",
									"    postman.setNextRequest('Validation Name');\r",
									"} else {\r",
									"    pm.collectionVariables.unset('nameData');\r",
									"    pm.collectionVariables.unset('currentDataName');\r",
									"    postman.setNextRequest('Validation Last Name');\r",
									"}\r",
									"\r",
									"pm.test('Check with invalid values', function () {\r",
									"    pm.expect(pm.response.json().message).to.be.a('string')\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let nameData = pm.collectionVariables.get('nameData');\r",
									"console.log(nameData);\r",
									"\r",
									"if(!nameData){\r",
									"    console.log(nameData);\r",
									"    nameData = [\"\", \"J\", \"Jo\", \"Jjjjjjjjjjjjjjjjjjjjj\", 123456, \"!!!!!!!\"];\r",
									"    pm.collectionVariables.set('currentDataName', nameData.shift());\r",
									"    pm.collectionVariables.set('nameData', nameData);\r",
									"} else {\r",
									"    console.log(nameData);\r",
									"    let currentDataName = nameData.shift();\r",
									"    console.log(nameData);\r",
									"    pm.collectionVariables.set('currentDataName', currentDataName);\r",
									"    pm.collectionVariables.set('nameData', nameData)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{currentDataName}}\",\r\n\"lastName\": \"{{lastName}}\",\r\n\"email\": \"{{$randomEmail}}\",\r\n\"password\": \"{{password}}\",\r\n\"repeatPassword\": \"{{repeatPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validation Last Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let validationData = pm.collectionVariables.get('lastNameData');\r",
									"\r",
									"if(validationData.length > 0){\r",
									"    console.log('+')\r",
									"    postman.setNextRequest('Validation Last Name');\r",
									"} else {\r",
									"    pm.collectionVariables.unset('lastNameData');\r",
									"    pm.collectionVariables.unset('currentLastDataName');\r",
									"    postman.setNextRequest('Validation Password');\r",
									"}\r",
									"\r",
									"pm.test('Check with invalid values', function () {\r",
									"    pm.expect(pm.response.json().message).to.be.a('string')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let lastNameData = pm.collectionVariables.get('lastNameData');\r",
									"console.log(lastNameData);\r",
									"\r",
									"if(!lastNameData){\r",
									"    console.log(lastNameData);\r",
									"    lastNameData = [\"\", \"S\", \"Sp\", \"Sssssssssssssssssssss\", 123456, \"!!!!!!!\"];\r",
									"    pm.collectionVariables.set('currentLastNameData', lastNameData.shift());\r",
									"    pm.collectionVariables.set('lastNameData', lastNameData);\r",
									"} else {\r",
									"    console.log(lastNameData);\r",
									"    let currentLastNameData = lastNameData.shift();\r",
									"    console.log(lastNameData);\r",
									"    pm.collectionVariables.set('currentLastNameData', currentLastNameData);\r",
									"    pm.collectionVariables.set('lastNameData', lastNameData)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{name}}\",\r\n\"lastName\": \"{{currentLastNameData}}\",\r\n\"email\": \"{{$randomEmail}}\",\r\n\"password\": \"{{password}}\",\r\n\"repeatPassword\": \"{{repeatPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validation Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let passwordData = pm.collectionVariables.get('passwordData');\r",
									"console.log(passwordData);\r",
									"\r",
									"if(!passwordData){\r",
									"    console.log(passwordData);\r",
									"    passwordData = [\"\", \"Qwerty12\", \"Qwerty123456789\", \"Qwerty1\", \"Qwerty1234567891\"];\r",
									"    pm.collectionVariables.set('currentPasswordData', passwordData.shift());\r",
									"    pm.collectionVariables.set('passwordData', passwordData);\r",
									"} else {\r",
									"    console.log(passwordData);\r",
									"    let currentPasswordData = passwordData.shift();\r",
									"    console.log(passwordData);\r",
									"    pm.collectionVariables.set('currentPasswordData', currentPasswordData);\r",
									"    pm.collectionVariables.set('passwordData', passwordData)\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let validationData = pm.collectionVariables.get('passwordData');\r",
									"\r",
									"if(validationData.length > 0){\r",
									"    console.log('+')\r",
									"    postman.setNextRequest('Validation Password');\r",
									"} else {\r",
									"    pm.collectionVariables.unset('passwordData');\r",
									"    pm.collectionVariables.unset('currentPasswordData');\r",
									"    postman.setNextRequest('New user');\r",
									"}\r",
									"\r",
									"pm.test('Check with invalid values', function () {\r",
									"    pm.expect(pm.response.json().message).to.be.a('string')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{name}}\",\r\n\"lastName\": \"{{lastName}}\",\r\n\"email\": \"{{$randomEmail}}\",\r\n\"password\": \"{{currentPasswordData}}\",\r\n\"repeatPassword\": \"{{repeatPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create uniq user",
			"item": [
				{
					"name": "New user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"photoFilename\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"distanceUnits\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"currency\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"photoFilename\",\r",
									"        \"distanceUnits\",\r",
									"        \"currency\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"var userId = jsonData.data.userId;\r",
									"pm.environment.set('userId', userId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"console.log(pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"console.log(pm.variables.replaceIn('{{$randomEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"email\": \"{{$randomEmail}}\",\r\n\"password\": \"{{pass}}\",\r\n\"repeatPassword\": \"{{pass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Edit User`s profile",
			"item": [
				{
					"name": "Edit user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Check all fields\", function () {\r",
									"    pm.expect(jsonData.data.name).to.eql(pm.variables.get(\"newName\"));\r",
									"    pm.expect(jsonData.data.photoFilename).to.be.string;\r",
									"    pm.expect(jsonData.data.lastName).to.eql(pm.variables.get(\"newLastName\"));\r",
									"    pm.expect(jsonData.data.dateBirth).to.eql(pm.variables.get(\"newDateBirth\"));\r",
									"    pm.expect(jsonData.data.country).to.eql(pm.variables.get(\"newCountry\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"photo\":\"default-newPhoto\",\r\n  \"name\":\"{{newName}}\",\r\n  \"lastName\":\"{{newLastName}}\",\r\n  \"dateBirth\":\"{{newDateBirth}}\",\r\n  \"country\":\"{{newCountry}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/profile",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid user name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let nameData = pm.collectionVariables.get('nameData');\r",
									"console.log(nameData);\r",
									"\r",
									"if(!nameData){\r",
									"    console.log(nameData);\r",
									"    nameData = [\"\", \"J\", \"Jo\", \"Jjjjjjjjjjjjjjjjjjjjj\", 123456, \"!!!!!!!\"];\r",
									"    pm.collectionVariables.set('currentDataName', nameData.shift());\r",
									"    pm.collectionVariables.set('nameData', nameData);\r",
									"} else {\r",
									"    console.log(nameData);\r",
									"    let currentDataName = nameData.shift();\r",
									"    console.log(nameData);\r",
									"    pm.collectionVariables.set('currentDataName', currentDataName);\r",
									"    pm.collectionVariables.set('nameData', nameData)\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let validationData = pm.collectionVariables.get('nameData');\r",
									"\r",
									"if(validationData.length > 0){\r",
									"    console.log('+')\r",
									"    postman.setNextRequest('Invalid user name');\r",
									"} else {\r",
									"    pm.collectionVariables.unset('nameData');\r",
									"    pm.collectionVariables.unset('currentDataName');\r",
									"    postman.setNextRequest('Invalid LastName');\r",
									"}\r",
									"\r",
									"pm.test('Check with invalid values', function () {\r",
									"    pm.expect(pm.response.json().message).to.be.a('string')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"photo\":\"{{photo}}\",\r\n  \"name\":\"{{currentDataName}}\",\r\n  \"lastName\":\"{{lastName}}\",\r\n  \"dateBirth\":\"{{dateBirth}}\",\r\n  \"country\":\"{{country}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/profile",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid LastName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let lastNameData = pm.collectionVariables.get('lastNameData');\r",
									"console.log(lastNameData);\r",
									"\r",
									"if(!lastNameData){\r",
									"    console.log(lastNameData);\r",
									"    lastNameData = [\"\", \"S\", \"Sp\", \"Sssssssssssssssssssss\", 123456, \"!!!!!!!\"];\r",
									"    pm.collectionVariables.set('currentLastNameData', lastNameData.shift());\r",
									"    pm.collectionVariables.set('lastNameData', lastNameData);\r",
									"} else {\r",
									"    console.log(lastNameData);\r",
									"    let currentLastNameData = lastNameData.shift();\r",
									"    console.log(lastNameData);\r",
									"    pm.collectionVariables.set('currentLastNameData', currentLastNameData);\r",
									"    pm.collectionVariables.set('lastNameData', lastNameData)\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let validationData = pm.collectionVariables.get('lastNameData');\r",
									"\r",
									"if(validationData.length > 0){\r",
									"    console.log('+')\r",
									"    postman.setNextRequest('Invalid LastName');\r",
									"} else {\r",
									"    pm.collectionVariables.unset('lastNameData');\r",
									"    pm.collectionVariables.unset('currentLastDataName');\r",
									"    postman.setNextRequest('Invalid DateBirth');\r",
									"}\r",
									"\r",
									"pm.test('Check with invalid values', function () {\r",
									"    pm.expect(pm.response.json().message).to.be.a('string')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"photo\":\"{{photo}}\",\r\n  \"name\":\"{{name}}\",\r\n  \"lastName\":\"{{currentLastNameData}}\",\r\n  \"dateBirth\":\"{{dateBirth}}\",\r\n  \"country\":\"{{country}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/profile",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid DateBirth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let dateBirthData = pm.collectionVariables.get('dateBirthData');\r",
									"console.log(dateBirthData);\r",
									"\r",
									"if(!dateBirthData){\r",
									"    console.log(dateBirthData);\r",
									"    dateBirthData = [\"\", \"19-02-2000\", \"0000-00-00\", \"1900-01-01\", 1899-01-01, \"!!!!!!!\"];\r",
									"    pm.collectionVariables.set('currentDateBirth', dateBirthData.shift());\r",
									"    pm.collectionVariables.set('dateBirthData', dateBirthData);\r",
									"} else {\r",
									"    console.log(dateBirthData);\r",
									"    let currentDateBirth = dateBirthData.shift();\r",
									"    console.log(dateBirthData);\r",
									"    pm.collectionVariables.set('currentDateBirth', currentDateBirth);\r",
									"    pm.collectionVariables.set('dateBirthData', dateBirthData)\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let validationData = pm.collectionVariables.get('dateBirthData');\r",
									"\r",
									"if(validationData.length > 0){\r",
									"    console.log('+')\r",
									"    postman.setNextRequest('Invalid DateBirth');\r",
									"} else {\r",
									"    pm.collectionVariables.unset('dateBirthData');\r",
									"    pm.collectionVariables.unset('currentDateBirth');\r",
									"    postman.setNextRequest('Invalid country');\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 210ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(210);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"photo\":\"default-newPhoto\",\r\n  \"name\":\"jack\",\r\n  \"lastName\":\"Sparoow\",\r\n  \"dateBirth\":\"{{currentDateBirth}}\",\r\n  \"country\":\"Canada\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/profile",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let countryData = pm.collectionVariables.get('countryData');\r",
									"console.log(countryData);\r",
									"\r",
									"if(!countryData){\r",
									"    console.log(countryData);\r",
									"    countryData = [\"\", \"Украина\", \"Україна\", \"Canada\", 18990101, \"!!!!!!!\"];\r",
									"    pm.collectionVariables.set('currentCountryData', countryData.shift());\r",
									"    pm.collectionVariables.set('countryData', countryData);\r",
									"} else {\r",
									"    console.log(countryData);\r",
									"    let currentCountryData = countryData.shift();\r",
									"    console.log(countryData);\r",
									"    pm.collectionVariables.set('currentCountryData', currentCountryData);\r",
									"    pm.collectionVariables.set('countryData', countryData)\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let validationData = pm.collectionVariables.get('countryData');\r",
									"\r",
									"if(validationData.length > 0){\r",
									"    console.log('+')\r",
									"    postman.setNextRequest('Invalid country');\r",
									"} else {\r",
									"    pm.collectionVariables.unset('countryData');\r",
									"    pm.collectionVariables.unset('currentCountryData');\r",
									"    postman.setNextRequest('New pass');\r",
									"}\r",
									"\r",
									"pm.test('Check with invalid values', function () {\r",
									"    pm.expect(pm.response.json().message).to.be.a('string')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"photo\":\"{{photo}}\",\r\n  \"name\":\"{{name}}\",\r\n  \"lastName\":\"{{lastName}}\",\r\n  \"dateBirth\":\"{{dateBirth}}\",\r\n  \"country\":\"{{currentCountryData}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/profile",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Change password",
			"item": [
				{
					"name": "New pass",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var userId = jsonData.data.userId;\r",
									"var userId3 = pm.environment.get('userId')\r",
									"pm.test('Is user ID OK?', function() {\r",
									"pm.expect(userId).to.deep.equal(userId3);\r",
									"});\r",
									"console.log(userId)\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"oldPassword\": \"{{pass}}\",\r\n  \"password\": \"{{newPass}}\",\r\n  \"repeatPassword\": \"{{newPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/password",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add car",
			"item": [
				{
					"name": "Add new car",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var carId = jsonData.data.id;\r",
									"console.log(\"ID авто:\", carId);\r",
									"pm.environment.set(\"carId\", carId);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"carBrandId\": 1,\r\n  \"carModelId\": 1,\r\n  \"mileage\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/cars",
							"host": [
								"{{url}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Expenses",
			"item": [
				{
					"name": "Add Expenses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let day = new Date();\r",
									"let fullDate = day.getFullYear() + '-' +(day.getMonth() + 1) + '-' + day.getDate()\r",
									"pm.environment.set('fullDate', fullDate);\r",
									"console.log('date', fullDate)\r",
									"\r",
									"if (!pm.environment.get('mileage')) {\r",
									"    pm.environment.set('mileage', 22);\r",
									"} else {\r",
									"       var currentMileage = pm.environment.get('mileage');\r",
									"    pm.environment.set('mileage', currentMileage + 10);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"carId\": \"{{carId}}\",\r\n  \"reportedAt\": \"{{fullDate}}\",\r\n  \"mileage\": {{mileage}},\r\n  \"liters\": 10,\r\n  \"totalCost\": 110,\r\n  \"forceMileage\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/expenses",
							"host": [
								"{{url}}"
							],
							"path": [
								"expenses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout/login",
			"item": [
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test('Key has value', function () {\r",
									"    pm.expect(jsonData).to.have.property('status', 'ok');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{newPass}}\",\r\n  \"remember\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signin",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete user",
			"item": [
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.iterationData.get('url')"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "pass",
			"value": "Qwerty12345",
			"type": "string"
		},
		{
			"key": "newPass",
			"value": "Test123456789",
			"type": "string"
		},
		{
			"key": "newPhoto",
			"value": "\n",
			"type": "string"
		},
		{
			"key": "newName",
			"value": "Jack",
			"type": "string"
		},
		{
			"key": "newLastName",
			"value": "Sparow",
			"type": "string"
		},
		{
			"key": "newDateBirth",
			"value": "1999-02-13T15:12:02.000Z",
			"type": "string"
		},
		{
			"key": "newCountry",
			"value": "Canada",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "email",
			"value": "Best@gmail.com",
			"type": "string"
		},
		{
			"key": "newNameData",
			"value": ""
		},
		{
			"key": "currentLastNameData",
			"value": ""
		}
	]
}